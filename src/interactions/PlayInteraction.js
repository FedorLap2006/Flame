const FlameInteraction = require('../structures/FlameInteraction');
const InteractionResponse = require('../utils/interactions/InteractionResponse');

class PlayInteraction extends FlameInteraction {
  constructor() {
    super('play');
  }

  async run(client, interaction) {
    function _checkURL(url) {
      try {
        new URL(url);
        return true;
      } catch {
        return false;
      }
    }

    const callback = new InteractionResponse(client);
    const node = client?.shoukaku?.getNode();
    const { query } = interaction.options;

    if (!interaction.member.voice.channelID) {
      return callback.send(
        interaction,
        '–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.',
        { flags: 64 },
      );
    }
    if (!node) {
      return callback.send(
        interaction,
        '–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∫–∞–∫–æ–π –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.',
        { flags: 64 },
      );
    }

    if (_checkURL(query)) {
      const result = await node.rest.resolve(query);
      if (!result) {
        return callback.send(
          interaction,
          '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –±—ã–ª–æ –Ω–∏—á–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ.',
          { flags: 64 },
        );
      }

      const { type, tracks, playlistName } = result;
      const track = tracks.shift();
      const res = await client.queue.handle(node, track, {
        guild: interaction.guild,
        channel: interaction.channel,
        member: interaction.member,
      });

      if (type == 'PLAYLIST') {
        for (const track of tracks) {
          await client.queue.handle(node, track, {
            guild: interaction.guild,
            channel: interaction.channel,
            member: interaction.member,
          });
        }
      }
      if (res) await res.play();
      return callback.send(
        interaction,
        type == 'PLAYLIST'
          ? `–ö–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ **${playlistName}** –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.`
          : `–¢—Ä–µ–∫ **${track.info.title}** –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ üéµ`,
      );
    }
    const searchData = await node.rest.resolve(query, 'youtube');
    try {
      if (!searchData.tracks.length) {
        return callback.send(
          interaction,
          '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –±—ã–ª–æ –Ω–∏—á–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ.',
          { flags: 64 },
        );
      }

      const track = searchData.tracks.shift();
      const res = await client.queue.handle(node, track, {
        guild: interaction.guild,
        channel: interaction.channel,
        member: interaction.member,
      });

      if (res) res.play();
      return callback.send(
        interaction,
        `–¢—Ä–µ–∫ **${track.info.title}** –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ üéµ`,
      );
    } catch {
      callback.send(
        interaction,
        '–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–Ω–æ–≤–∞.',
        { flags: 64 },
      );
    }
  }
}

module.exports = PlayInteraction;
